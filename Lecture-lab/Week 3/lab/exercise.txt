Sure! Here are a few examples of non-linear data structures and their implementations:

Graphs:

Social network connections: A social network can be represented as a graph, where each user is a node and their connections (friendships) are represented as edges between the nodes.
Road networks: A map of roads and intersections can be represented as a graph, where intersections are nodes and roads are edges connecting the nodes.
Web page navigation: The structure of hyperlinks between web pages can be represented as a graph, where each web page is a node and hyperlinks are edges connecting the nodes.
Trees:

File system hierarchy: A file system can be represented as a tree structure, where directories are nodes and files are the leaves.
Organization hierarchy: An organizational structure can be represented as a tree, with the CEO as the root node, and different levels of management as child nodes.
Binary search tree: A binary search tree is a specific type of tree where each node has at most two children, and the left child is smaller than the parent, while the right child is larger.
Hash Table:

Dictionary implementation: A dictionary data structure can be implemented using a hash table, where each key-value pair is stored and accessed using a hash function.
Caching system: A cache can be implemented using a hash table, where frequently accessed data is stored in the table for faster retrieval.
Symbol table in compilers: Compilers use hash tables to implement symbol tables, where variables and identifiers are stored along with their associated information.
These are just a few examples of how non-linear data structures like graphs, trees, and hash tables can be used in different applications. Each data structure has its own unique characteristics and use cases, providing efficient storage and retrieval of data in various scenarios.